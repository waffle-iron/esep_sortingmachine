/*
 * HardwareLayer.h
 *
 *  Created on: 16.10.2017
 *      Author: abj240
 */

#ifndef HARDWARELAYER_H_
#define HARDWARELAYER_H_

#include "Signals.h"
#include "Motor.h"
#include "SwitchPoint.h"
#include "TrafficLight.h"
#include "SignalGenerator.h"
#include "Observable.h"
#include "HeightSensor.h"
#include "ButtonLEDs.h"

namespace hardwareLayer {

	class HardwareLayer : public Observable{
	public:
		HardwareLayer();
		virtual ~HardwareLayer();

		void greenLightOn();
		void greenLightOff();
		void yellowLightOn();
		void yellowLightOff();
		void redLightOn();
		void redLightOff();

		void StartLEDOn();
		void StartLEDOff();
		void ResetLEDOn();
		void ResetLEDOff();
		void Q1LEDOn();
		void Q1LEDOff();
		void Q2LEDOn();
		void Q2LEDOff();

		void blinkGreen(Speed speed);
		void blinkRed(Speed speed);
		void blinkYellow(Speed speed);

		void motorStart();
		void motorStop();
		void motorSlow();
		void motorFast();
		void motorRotateClockwise();
		void motorRotateCounterclockwise();

		void switchPointOpen();
		void switchPointClose();

		uint16_t getHeight();

		/**
		 * @brief 	If a pending signal exists
		 * @return  returns one pending signal generated by SignalGenerator.
		 * 			If there are no pending signals return value is Signal(cb_x,cb_x,SIGNAL_BUFFER_EMPTY)
		 */
		Signal getSignal();

		/**
		 * @brief removes all signals from Buffer and adds SIGNAL_BUFFER_EMPTY signal
		 *
		 * if removing all signals fails a error message gets logged.
		 */
		void clearSignalBuffer();

	private:
		actuators::Motor& _motor;
		actuators::SwitchPoint& _switchPoint;
		mmi::TrafficLight& _trafficLight;
		io::SignalGenerator signalGenerator;
		sensors::HeightSensor &_heightSensor;
		mmi::ButtonLEDs& _ButtonLEDs;
};

}

#endif /* HARDWARELAYER_H_ */
